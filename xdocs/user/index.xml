<?xml version="1.0" encoding="UTF-8"?>

<!--
Copyright 2006-2007, by the California Institute of 
Technology. ALL RIGHTS RESERVED. United States Government 
Sponsorship acknowledged. Any commercial use must be negotiated with 
the Office of Technology Transfer at the California Institute of 
Technology.

This software may be subject to U.S. export control laws. By 
accepting this software, the user agrees to comply with all 
applicable U.S. export laws and regulations. User has the 
responsibility to obtain export licenses, or other export authority 
as may be required before exporting such information to foreign 
countries or providing access to foreign persons.

$Id: index.xml 1157 2006-06-16 19:50:08Z shardman $
-->

<document>
  <properties>
    <title>Use and Operation</title>
    <author email="Michael.Cayanan@jpl.nasa.gov">Michael Cayanan</author>
    <author email="Sean.Hardman@jpl.nasa.gov">Sean Hardman</author>
  </properties>

  <body>
    <section name="Using the Validation Tool">
      <p>This section describes how to use the Validation Tool (VTool) in order to perform automated validation of data products. The following topics can be found in this section:
      </p>

      <ul>
        <li><a href="#Overview">Overview</a></li>
        <li><a href="#Data Dictionary Requirement">Data Dictionary Requirement</a></li>
        <li><a href="#UNIX-Based Setup">UNIX-Based Setup</a></li>
        <li><a href="#Windows Setup">Windows Setup</a></li>
        <li><a href="#Command-Line Options">Command-Line Options</a></li>
        <li><a href="#Specifying Targets">Specifying Targets</a></li>
        <li><a href="#Report And Log Generation">Report And Log Generation</a></li>
        <li><a href="#Examples">Examples</a></li>
        <li><a href="#Using a Configuration File">Using a Configuration File</a></li>
        <li><a href="#Multiple Dictionary Support">Multiple Dictionary Support</a></li>
        <li><a href="#Common Errors">Common Errors</a></li>
      </ul>

      <p>Note: The command-line examples in this section have been broken into multiple lines for readability. The commands should be reassembled into a single line prior to execution.
      </p>

      <subsection name="Overview">
        <p>The goal of VTool is to programmatically ascertain if a given data product is PDS compliant (or "valid"). Typically, this means the data product is well formed, complete, syntactically and semantically correct, and that it conforms to all applicable PDS standards. The standards themselves are defined in the <a href="http://pds.nasa.gov/documents/sr/" target="_blank">PDS Standards Reference</a>.
        </p>
      </subsection>

      <subsection name="Data Dictionary Requirement">
        <p>With this release of VTool, the requirement of using the provided PDS data dictionary is no longer necessary. Through the efforts of many, the anomalies found in past versions of the data dictionary have been corrected in release <i>1r64</i>. So, this release or later of the data dictionary is required for VTool. The latest version of the PDS data dictionary can be retrieved from the <a href="http://pds.nasa.gov/tools/data_dictionary_lookup.cfm" target="_blank">PDS Data Dictionary Lookup</a> web page.
        </p>
      </subsection>

      <subsection name="UNIX-Based Setup">
        <p>In order to execute the Validation Tool, the user's environment must first be configured appropriately. This section details the environment setup for UNIX-based machines providing three different methods:
        </p>

        <ul>
          <li>Set the CLASSPATH Environment Variable</li>
          <li>Specify the CLASSPATH on the Command-Line</li>
          <li>Specify the Jar on the Command-Line</li>
        </ul>

        <p><b><i>Set the CLASSPATH Environment Variable</i></b></p>
        <p>The following commands demonstrate how to set the <i>CLASSPATH</i> environment variable, by appending to its current setting. The example contains <i>X.X.X</i>, which represents the current version of the <i>product-tools</i> package.
        </p>

        <p>The first example and preferred method for setting the variable, appends the executable jar file found in the <i>bin</i> directory:
        </p>

        <source>
[node:~] setenv CLASSPATH ${CLASSPATH}:\
$HOME/product-tools-X.X.X/bin/product-tools-X.X.X-app.jar

[node:~] echo $CLASSPATH
        </source>

        <p>The second example separately appends the dependent jar files, found in the <i>lib</i> directory:
        </p>

        <source>
[node:~] setenv CLASSPATH ${CLASSPATH}:\
$HOME/product-tools-X.X.X/lib/antlr-2.7.6.jar:\
$HOME/product-tools-X.X.X/lib/commons-cli-1.0.jar:\
$HOME/product-tools-X.X.X/lib/commons-collections-3.1.jar:\
$HOME/product-tools-X.X.X/lib/commons-configuration-1.2.jar:\
$HOME/product-tools-X.X.X/lib/commons-io-1.2.jar:\
$HOME/product-tools-X.X.X/lib/commons-lang-2.1.jar:\
$HOME/product-tools-X.X.X/lib/commons-logging-1.0.3.jar:\
$HOME/product-tools-X.X.X/lib/product-tools-X.X.X.jar

[node:~] echo $CLASSPATH
        </source>

        <p>The second command in both of the examples above, will display the current value of the <i>CLASSPATH</i> variable. Please note that the value for the <i>CLASSPATH</i> variable may not contain space characters. Once the <i>CLASSPATH</i> is set, the tool can be executed with the following command:
        </p>

        <source>
[node:~] java gov.nasa.pds.tools.VTool &lt;command-line arguments&gt;
        </source>

        <p><b><i>Specify the CLASSPATH on the Command-Line</i></b></p>
        <p>An alternative method to setting the <i>CLASSPATH</i> variable is to specify the <i>java.ext.dirs</i> Java property on the command-line when running the tool each time. This is done by passing the property via the Java "-D" flag as demonstrated in the following example:
        </p>

        <source>
[node:~] java -Djava.ext.dirs=$HOME/product-tools-X.X.X/lib \
gov.nasa.pds.tools.VTool &lt;command-line arguments&gt;
        </source>

        <p><b><i>Specify the Jar on the Command-Line</i></b></p>
        <p>Another alternative method is to specify the executable jar file on the command-line when running the tool each time. This is done by passing the jar file specification via the Java "-jar" flag as demonstrated in the following example:
        </p>

        <source>
[node:~] java -jar \
$HOME/product-tools-X.X.X/bin/product-tools-X.X.X-app.jar \
&lt;command-line arguments&gt;
        </source>
      </subsection>
      
      <subsection name="Windows Setup">
        <p>In order to execute the Validation Tool, the user's environment must first be configured appropriately. This section details the environment setup for Windows machines providing three different methods:
        </p>

        <ul>
          <li>Set the CLASSPATH Environment Variable</li>
          <li>Specify the CLASSPATH on the Command-Line</li>
          <li>Specify the Jar on the Command-Line</li>
        </ul>

        <p><b><i>Set the CLASSPATH Environment Variable</i></b></p>
        <p>The following commands demonstrate how to set the <i>CLASSPATH</i> environment variable, by appending to its current setting. The example contains <i>X.X.X</i>, which represents the current version of the <i>product-tools</i> package.
        </p>

        <p>The first example and preferred method for setting the variable, appends the executable jar file found in the <i>bin</i> directory:
        </p>

        <source>
C:\&gt; set CLASSPATH=%CLASSPATH%;\
c:\product-tools-X.X.X\bin\product-tools-X.X.X-app.jar

C:\&gt; echo %CLASSPATH%
        </source>

        <p>The second example separately appends the dependent jar files, found in the <i>lib</i> directory:
        </p>

        <source>
C:\&gt; set CLASSPATH=%CLASSPATH%;\
c:\product-tools-X.X.X\lib\antlr-2.7.6.jar;\
c:\product-tools-X.X.X\lib\commons-cli-1.0.jar;\
c:\product-tools-X.X.X\lib\commons-collections-3.1.jar;\
c:\product-tools-X.X.X\lib\commons-configuration-1.2.jar;\
c:\product-tools-X.X.X\lib\commons-io-1.2.jar;\
c:\product-tools-X.X.X\lib\commons-lang-2.1.jar;\
c:\product-tools-X.X.X\lib\commons-logging-1.0.3.jar;\
c:\product-tools-X.X.X\lib\product-tools-X.X.X.jar

C:\&gt; echo %CLASSPATH%
        </source>

        <p>The second command in both of the examples above, will display the current value of the <i>CLASSPATH</i> variable. Please note that the value for the <i>CLASSPATH</i> variable may not contain space characters. Once the <i>CLASSPATH</i> is set, the tool can be executed with the following command:
        </p>

        <source>
C:\&gt; java gov.nasa.pds.tools.VTool &lt;command-line arguments&gt;
        </source>

        <p><b><i>Specify the CLASSPATH on the Command-Line</i></b></p>
        <p>An alternative method to setting the <i>CLASSPATH</i> variable is to specify the <i>java.ext.dirs</i> Java property on the command-line when running the tool each time. This is done by passing the property via the Java "-D" flag as demonstrated in the following example:
        </p>

        <source>
C:\&gt; java -Djava.ext.dirs=c:\product-tools-X.X.X\lib \
gov.nasa.pds.tools.VTool &lt;command-line arguments&gt;
        </source>

        <p><b><i>Specify the Jar on the Command-Line</i></b></p>
        <p>Another alternative method is to specify the executable jar file on the command-line when running the tool each time. This is done by passing the jar file specification via the Java "-jar" flag as demonstrated in the following example:
        </p>

        <source>
C:\&gt; java -jar \
c:\product-tools-X.X.X\bin\product-tools-X.X.X-app.jar \
&lt;command-line arguments&gt;
        </source>
      </subsection>

      <subsection name="Command-Line Options">
        <p>The following table contains command-line options available to VTool:
        </p>

        <table>
          <tr><th colspan="2">VTool Command-Line Options</th></tr>
          <tr><td nowrap="nowrap">-t, --target &lt;labels,URLs,dirs&gt;</td><td>Explicitly specify the targets (label files, directories, and URLs) to validate. Targets can be specified implicitly as well (example: VTool label.lbl). If targets are specified both implicitly and explicitly on the command-line, then the implicit targets will get processed first.</td></tr>
          <tr><td>-d, --dict &lt;.full files&gt;</td><td>Specify the Planetary Science Data Dictionary full file name and any local dictionaries.</td></tr>
          <tr><td>-l, --log-file &lt;file (optional)&gt;</td><td>Specify the file name for the machine-readable log. A file specification is optional. If no file name is given, then the log will be written to standard out. If the log will be written to a file and a directory is going to be validated, it is recommended to write the log to a location different from this target directory as the tool will see this as a potential label file to validate and report on it.</td></tr>
          <tr><td>-r, --report-file &lt;file&gt;</td><td>Specify the file name for the human-readable report. Default is to write to the standard out if this flag is not specified. This report, however, will not print to standard out if this flag is missing AND the log file flag is specified with no file name.</td></tr>
          <tr><td>-s, --report-style</td><td>Specify the standard human-readable report format. Valid values are "full" for a full view, "min" for a minimal view, or "sum" for a summary view. Default is to generate a full report if this flag is not specified.</td></tr>
          <tr><td>-v, --verbose</td><td>Specify the message severity level and above to include in the human-readable report (1=Info, 2=Warning, 3=Error). Default is warnings and above(level 2).</td></tr>
          <tr><td>-I, --include &lt;paths&gt;</td><td>Specify paths to search for files referenced by pointers in a label. Separate each path with a space. Default is to always look in the directory of the label, then search the specified directories.</td></tr>
          <tr><td>-F, --no-follow</td><td>Do not follow or check for the existence of files referenced by pointer statements in a label.</td></tr>
          <tr><td>-f, --force</td><td>Enable standalone label fragment validation. Default is to not validate them.</td></tr>
          <tr><td>-c, --config &lt;file&gt;</td><td>Specify a configuration file to set the default values for VTool.</td></tr>
          <tr><td>-L, --local</td><td>Validate files only in the input directory rather than recursively traversing down the sub-directories.</td></tr>
          <tr><td nowrap="nowrap">-e, --regexp &lt;expressions&gt;</td><td>Specify file patterns to look for when validating a directory. Separate each pattern with a space. Patterns should be surrounded in quotes (example: -e "*.LBL *.FMT" or -e "*.LBL" "*.FMT") to avoid having the system shell mistakingly interpreting them (This has been seen on non-Windows systems). Pattern matching is case-insensitive in Windows, but case-sensitive for other systems.
          </td></tr>
          <tr><td nowrap="nowrap">-X, --ignore-file &lt;expressions&gt;</td><td>Specify file patterns to ignore when validating a directory. Separate each pattern with a space. Patterns should be surrounded in quotes (i.e. -X "*.TXT *.TAB" or -X "*.TXT" "*.TAB") to avoid having the system shell mistakingly interpreting them (This has been seen on non-Windows systems). Pattern matching is case-insensitive in Windows, but case-sensitive for other systems.
          </td></tr>
          <tr><td nowrap="nowrap">-D, --ignore-dir &lt;expressions&gt;</td><td>Specify the directory pattterns to ignore. Separate each pattern with a space. Patterns should be surrounded by quotes (i.e. -D "LABEL EXTRAS" or -D "LABEL" "EXTRAS") to avoid having the system shell mistakingly interpreting them (This has been seen on non-Windows systems). Pattern matching is case-insensitive in Windows, but case-sensitive for other systems.
          </td></tr>
          <tr><td>-p, --progress</td><td>Enable validation progress reporting. Default is no. When this option is enabled, the current directory being validated will be written to standard error, followed by a series of asterisk "*" symbols, which represents a file being validated.</td></tr>
          <tr><td>-h, --help</td><td>Display VTool usage</td></tr>
          <tr><td>-V, --version</td><td>Display VTool version</td></tr>
        </table>
      </subsection> 

      <subsection name="Specifying Targets">
        <p>Targets are validated in the order in which they are specified on the command-line. They can be specified implicitly and explicitly.
        </p>
        
        <p>To specify targets implicitly, specify them first on the command-line before setting any other flag.
        </p>
        
        <p>The following command demonstrates the validation of a single data product label, specified implicitly, against the PSDD:
        </p>
        <source>
[node:~] java gov.nasa.pds.tools.VTool LABEL.LBL \
-d pdsdd.full
        </source>        
        
        <p>The following command demonstrates the validation of multiple data product labels, both specified implicitly, against the PSDD:
        </p>
        <source>
[node:~] java gov.nasa.pds.tools.VTool LABEL.LBL $HOME/DIR \
-d pdsdd.full
        </source>
        
        <p><b>Specifying a target implicitly (see the example below) after specifying flags is not allowed. Unexpected results will occur.</b>
        </p>
        <source>
[node:~] java gov.nasa.pds.tools.VTool -d pdsdd.full \
LABEL.LBL
        </source>         
        
        <p>Targets can be specified both implicitly and explicitly at the same time. Targets specified implicitly are validated first, followed by those that are specified explicitly with the target flag.
        </p>
        
        <p>The following command demonstrates the validation of multiple data product labels, specified both implicitly and explicitly, against the PSDD:
        </p> 
        
        <source>
[node:~] java gov.nasa.pds.tools.VTool LABEL1.LBL \
LABEL2.LBL -d pdsdd.full -t LABEL3.LBL $HOME/DIR
        </source>            
        
        <p>In this example, LABEL1.LBL and LABEL2.LBL will get validated first, then LABEL3.LBL and the labels in $HOME/DIR will get validated next.
        </p>
      </subsection>
        
      <subsection name="Report And Log Generation">
        <p>The examples below will demonstrate how to generate a human-readable report and machine-readable log with VTool.
        </p>
        
        <p><b>Writing A Human-Readable Report To File</b></p>
        
        <p>Specify the report file flag to write the human-readable report to file. The report style flag is used to specify the report format. If the style flag is not specified, the default is to show a full report.
        </p>
                
        <p>The following command demonstrates writing the human-readable, full report to a file named <i>report.txt</i>:
        </p>
        <source>
[node:~] java gov.nasa.pds.tools.VTool LABEL.LBL \
-d pdsdd.full -r report.txt
        </source>

        <p><b>Writing A Human-Readble Report To Standard Out</b></p>

        <p>Do not specify the report file flag to write the human-readable report to file.
        </p>
        
        <p>The following command demonstrates the validation of a single data product label against the PSDD, where the human-readable, full report is written to standard out instead:
        </p>
        <source>
[node:~] java gov.nasa.pds.tools.VTool LABEL.LBL \
-d pdsdd.full
        </source>
        
        <p>In the above examples, the machine-readable log is written to memory. The examples below will demonstrate how to see the machine-readable log.
        </p>
        
        <p><b>Writing The Machine-Readable Log To Standard Out With No Human-Readable Report</b></p>
        <p>Use the log file flag <i>with no file specification</i> and do not specify the report file flag.
        </p>
  
        <p>The following command demonstrates writing the machine-readable log to standard out with no human-readable report generated:
        </p>       
        <source>
[node:~] java gov.nasa.pds.tools.VTool LABEL.LBL \
-d pdsdd.full -l
        </source>
        
        <p><b>Writing The Machine-Readable Log To A File, Writing The Human-Readable Report To Standard Out</b></p>
        
        <p>Specify the report file flag and the log file flag <i>with a file name specification</i>.
        </p>
        
        <p>The following command demonstrates writing the machine-readable log to a file named <i>log.xml</i> and writing a human-readable, full report to standard out.
        </p>        
        <source>
[node:~] java gov.nasa.pds.tools.VTool LABEL.LBL \
-d pdsdd.full -l log.xml
        </source>
        
        <p><b>Writing Both The Machine-Readable Log And Human-Readable Report To A File</b></p>
        
        <p>Specify the report file flag and the log file flag with a file specification. The file names should be different. The log and report cannot be written to the same file.
        </p>

        <p>The following command demonstrates writing the machine-readable log to a file named <i>log.xml</i> and writing the human-readable report to a file named <i>report.txt</i>
        </p>       
        <source>
[node:~] java gov.nasa.pds.tools.VTool LABEL.LBL \
-d pdsdd.full -l log.xml -r report.txt
        </source>   

        <p><b>Writing The Machine-Readable Log To Standard Out, Writing The Human-Readable Report To A File</b></p>

        <p>Specify the report file flag and the log file flag with no file specification.
        </p>
        
        <p>The following command demonstrates writing the machine-readable log to standard out and writing the human-readable report to a file named <i>report.txt</i>
        </p>       
        <source>
[node:~] java gov.nasa.pds.tools.VTool LABEL.LBL \
-d pdsdd.full -l -r report.txt
        </source>        
      </subsection>
        
      <subsection name="Examples">
        <p>The examples below demonstrate the many ways that the tool can be executed to perform automated validation.
        </p>
        
        <p><b>Validating Against a Single Dictionary</b></p>
        
        <p>The following command demonstrates the validation of a single data product label against the PSDD:
        </p>
        
        <source>
[node:~] java gov.nasa.pds.tools.VTool LABEL.LBL \
-d pdsdd.full 
        </source>       
        
        <p><b>Validating Against Multiple Dictionaries</b></p>
        
        <p>The following command demonstrates the validation of a single data product label against the PSDD and a local dictionary:
        </p>
        <source>
[node:~] java gov.nasa.pds.tools.VTool LABEL.LBL \
-d pdsdd.full localdd.full 
        </source>

        <p>For more information on how the tool behaves when multiple dictionaries are passed in, please see the <a href="#Multiple Dictionary Support">multiple dictionary support</a> section.
        </p>

        <p><b>Validating Files With A Specific File Pattern</b></p>

        <p>The following command demonstrates the validation of multiple data product labels in a specified target directory, where validation only occurs on file names that end in ".LBL" or begins with the letters "MER":
        </p>
        <source>
[node:~] java gov.nasa.pds.tools.VTool $HOME/DIR \
-d pdsdd.full -e "*.LBL" "MER*"
        </source>

        <p><b>Ignoring Sub-Directories During Validation</b></p>
        
        <p>By default, the tool will recursively traverse down a directory tree when a target directory is specified, validating files within the sub-directories. Sub-directories can be ignored with the ignore directories flag.
        </p>
        
        <p>The following command demonstrates the validation of multiple data product labels in a specified target directory, where directories named "EXTRAS" or "LABEL" are ignored.
        </p>
        <source>
[node:~] java gov.nasa.pds.tools.VTool $HOME/DIR \
-d pdsdd.full -D "EXTRAS" "LABEL"
        </source>        
        
        <p>The local flag can also be used to stop the tool from recursing down a directory tree.
        </p>
        
        <p>The following command demonstrates the same validation as above, but without recursion:
        </p>
        <source>
[node:~] java gov.nasa.pds.tools.VTool $HOME/DIR \
-d pdsdd.full -L
        </source>

        <p><b>Ignoring Files With A Specific File Pattern</b></p>

        <p>The ignore files flag can be used to tell the tool which files to ignore during validation.
        </p>

        <p>The following command demonstrates the validation of multiple data product labels contained in a directory except for files ending in a ".IMG" or ".TAB":
        </p>
        <source>
[node:~] java gov.nasa.pds.tools.VTool $HOME/DIR \
-d pdsdd.full -X "*IMG" "*TAB"
        </source>
        
        <p><b>Checking For Referenced Files In Different Locations</b></p>
        
        <p>If a data product label contains a pointer statement that references a file, it will always assume it is co-located with the label. If it cannot be found there, then VTool will look for that referenced file in the paths specified by the include directories option.
        </p>
        
        <p>The following command demonstrates the validation of a data product label that contains a pointer statement to a file located in a directory called DIR.
        </p>
        <source>
[node:~] java gov.nasa.pds.tools.VTool LABELPTR.LBL \
-d pdsdd.full -I $HOME/path
        </source>
        
        <p>If the data product label contains pointer statements that reference files located in two different locations, then multiple paths can be specified.
        </p>
        
        <p>The following command demonstrates the validation of a data product label that contains pointer statements that reference files located in two different locations, path1 and path2.
        </p>
        <source>
[node:~] java gov.nasa.pds.tools.VTool LABELPTR2.LBL \
-d pdsdd.full -I $HOME/path1 $HOME/path2
        </source>
        
        <p><b>Not Following A Pointer</b></p>
        
        <p>If a data product label points to a label fragment, VTool has the capability of validating this label without having to validate the associated label fragment with the no follow pointers option. This would be used in cases where the label fragment is not complete or in cases where the user wishes to simply check that the parent label structure is PDS compliant.
        </p>
        
        <p>The following command demonstrates the validation of a data product label that contains a label fragment, but specifying to the tool to not follow the pointer:
        </p>
        <source>
[node:~] java gov.nasa.pds.tools.VTool LABEL.LBL \
-d pdsdd.full -F
        </source>
        
        <p><b>Standalone Label Fragment Validation</b></p>
        
        <p>The force flag is used to force standalone label fragment validation. When this flag is specified, standalone label fragment validation will occur on files whose extension ends in a .FMT
        </p>
        
        <p>The following command demonstrates the validation of multiple data products, including performing standalone label fragment validation on any files it finds with a .FMT extension:
        </p>
        <source>
[node:~] java gov.nasa.pds.tools.VTool $HOME/DIR \
-d pdsdd.full -f
        </source>         
        
        <p><b>Changing Tool Behaviors With The Configuration File</b></p>
        
        <p>A configuration file can be passed into the command-line to change the default behaviors of the tool and to also provide users a way to perform validation with a single flag (see the section below for details on how to set the configuration file). 
        </p>
        
        <p>The following command demonstrates performing validation using a configuration file:
        </p>
        <source>
[node:~] java gov.nasa.pds.tools.VTool -c config.txt
        </source>
      </subsection>

      <subsection name="Using a Configuration File">
        <p>A configuration file is used to set the default behaviors of the tool. It consists of a text file made up of keyword/value pairs. The configuration file follows the syntax of the stream parsed by the Java Properties.load(java.io.InputStream) method. </p>
        <p>Blank lines and lines which begin with the hash character "#" are ignored.</p>
        <p>Values may be separated on different lines if a backslash is placed at the end of the line that continues below.</p>
        <p>Escape sequences for special characters like a line feed, a tabulation or a unicode character, are allowed in the values and are specified in the same notation as those used in Java strings (e.g. \n, \t, \r).
        </p>
        <p><b>Since backslashes (\) have special meanings in a configuration file, keyword values that contain this character will not be interpreted properly by VTool even if it is surrounded by quotes. A common example would be a Windows path name (e.g. c:\VTT_EN_1-1\target). Use the forward slash character instead (c:/VTT_EN_1-1/target) or escape the backslash character (c:\\VTT_EN_1-1\\target).
        </b></p>
        <p><b>Any flag specified on the command-line takes precedence over any equivalent settings placed in the configuration file.</b>
        </p>
            
        <p>The following table contains valid keywords that can be specified in the configuration file:</p>

        <table>
          <tr><th>KEYWORD</th><th>ASSOCIATED FLAG</th><th>valid value(s)</th></tr>
          <tr><td>vtool.target</td><td>-t</td><td>Specify labels,directories, and URLs</td></tr>
          <tr><td>vtool.dict</td><td>-d</td><td>Specify dictionary files</td></tr>
          <tr><td>vtool.logfile</td><td nowrap="nowrap">-l (with a file spec)</td><td>Specify the machine-readable log file name.</td></tr>
          <tr><td>vtool.showlog</td><td nowrap="nowrap">-l (with no file spec)</td><td>Set to 'true' to write the log to standard out, 'false' otherwise or do not specify. Setting this to 'true' and specifying 'vtool.logfile' is not allowed.</td></tr>
          <tr><td>vtool.report</td><td>-r</td><td>Specify the human-readable report file name (do not specify if wanting to write to standard out)</td></tr>
          <tr><td>vtool.style</td><td>-s</td><td>Specify the standard human-readable report format ("full", "min", or "sum"). If not specified, then a full report will be generated</td></tr>
          <tr><td>vtool.verbose</td><td>-v</td><td>Specify the message severity level and above to include in the human-readable report(1=Info, 2=Warning, 3=Error). Default is warnings and above(level 2).</td></tr>
          <tr><td nowrap="nowrap">vtool.includepaths</td><td>-I</td><td>Specify paths to search for files refererenced by pointers in a label</td></tr>
          <tr><td>vtool.follow</td><td>-F</td><td>Set to 'false' to not look for files referenced by pointer statements in a label, set to 'true' otherwise</td></tr>
          <tr><td>vtool.force</td><td>-f</td><td>Set to 'true' to enable standalone label fragment validation, 'false' otherwise</td></tr>
          <tr><td>vtool.recursive</td><td>-L</td><td>Set to 'false' to not traverse a directory, set to 'true' otherwise</td></tr>
          <tr><td>vtool.regexp</td><td>-e</td><td>Specify file patterns to search for when validating a directory.</td></tr>
          <tr><td>vtool.ignorefile</td><td>-X</td><td>Specify file patterns to ignore when validating a directory.</td></tr>
          <tr><td>vtool.ignoredir</td><td>-D</td><td>Specify directory patterns to ignore.</td></tr>
          <tr><td>vtool.progress</td><td>-p</td><td>Set to 'true' to enable progress reporting, 'false' otherwise.</td></tr>
        </table>

        <p>The following example demonstrates how to set a configuration file:</p>
        <source>
# This is a VTool configuration file          

vtool.target = ./TEST_DIR
vtool.dict = pdsdd.full
vtool.logfile = log.xml
vtool.report = rpt.txt
vtool.recursive = false
vtool.includepaths = /home/path
vtool.regexp = "*.LBL"
        </source>

        <p>This is equivalent to running the tool with the following flags:</p>
        <source>
-t ./TEST_DIR -d pdsdd.full -l log.xml -L -e "*.LBL" \
-I /home/path -r rpt.txt
        </source>          

        <p>The following example demonstrates how to set a configuration file with multiple values for a keyword:
        </p>
        <source>
# This is a VTool configuration file with multiple values

vtool.target = TEST.LBL ./TEST_DIR
vtool.dict = pdsdd.full localdd.full
vtool.recursive = true
vtool.includepaths = /home/path1 /home/path2
vtool.regexp = "*.LBL" "*.FMT"
        </source>

        <p>This is equivalent to running the tool with the following flags:</p>
        <source>
-t TEST.LBL ./TEST_DIR -d pdsdd.full localdd.full \
-e "*.LBL" "*.FMT" -I /home/path1 /home/path2
        </source>

        <p>The following example demonstrates how to set a configuration file with multiple values that span across multiple lines:
        </p>
        <source>
# This is a VTool configuration file with multiple values
# that span across multiple lines

vtool.target = TEST.LBL \
               ./TEST_DIR
vtool.dict = pdsdd.full \
             localdd.full
vtool.recursive = true
vtool.regexp = "*.LBL" \
                 "*.FMT"
        </source>
        
        <p>The following example demonstrates how to override a setting in the configuration file.</p>
        
        <p>Suppose the configuration file named config.txt is defined as follows:</p>
        <source>
# This is another VTool configuration file

vtool.target = ./TEST_DIR
vtool.dict = pdsdd.full
vtool.logfile = log.xml
vtool.recursive = false
vtool.regexp = "*.LBL"
        </source>
          
        <p>If validating everything in TEST_DIR is desired rather than just files that end in "LBL" as is defined in the configuration file, then the following command demonstrates how to perform this behavior:
        </p>
        <source>
[node:~] java gov.nasa.pds.tools.VTool -c config.txt -e "*"
        </source>
      </subsection>
      
      <subsection name="Multiple Dictionary Support">
        <p>VTool allows multiple dictionary files to be passed in through the command-line via the "d" flag. When passing in multiple dictionaries, element and object definitions found in the dictionaries are merged together internally. In the case where definitions are found to be identical in each of the dictionary files being passed in, the definition found in the dictionary file specified LAST on the command-line will be retained.
        </p>
        
        <p>The following example demonstrates the VTool behavior when passing in two dictionary files:</p>
        
        <p>Suppose a PSDD, pdsdd.full, and a local dictionary, local-dd1.full, is being passed into VTool, where the PSDD contains the following DATA_SET_ID definition:</p>
        <source>
OBJECT = ELEMENT_DEFINITION
  NAME = DATA_SET_ID
  STATUS_TYPE = APPROVED
  GENERAL_DATA_TYPE = IDENTIFIER
  UNIT_ID = NONE
  STANDARD_VALUE_TYPE = FORMATION
  MAXIMUM_LENGTH = 40
  DESCRIPTION = "
     The data_set_id element is a unique
     alphanumeric identifier for a data set or a data product.
     The data_set_id value for a given data set or
     product is constructed according to flight project
     naming conventions.  In most cases the data_set_id is an
     abbreviation of the data_set_name.
     Example value: MR9/VO1/VO2-M-ISS/VIS-5-CLOUD-V1.0.
     Note:  In the PDS, the values for both data_set_id and
     data_set_name are constructed according to standards
     outlined in the Standards Reference."
  STANDARD_VALUE_SET = {
     "A-5-DDR-ASTERMAG-V1.0",
     "A-5-DDR-ASTEROID-SPIN-VECTORS-V3.0",
     "A-5-DDR-ASTNAMES-V1.0",
     "A-5-DDR-POLE-POSITION-REF-V1.0",
     "A-5-DDR-POLE-POSITION-V1.0",
     "A-5-DDR-TAXONOMY-V1.0",
     "ARCB-L-RTLS-3-70CM-V1.0",
     "ARCB-L-RTLS-4-70CM-V1.0",
     ....
     }
END_OBJECT = ELEMENT_DEFINITION
END
        </source>
          
        <p>and the local dictionary also contains DATA_SET_ID, but with a different set of standard values:</p>
        <source>
OBJECT = ELEMENT_DEFINITION
  NAME = DATA_SET_ID
  STATUS_TYPE = APPROVED
  GENERAL_DATA_TYPE = IDENTIFIER
  UNIT_ID = NONE
  STANDARD_VALUE_TYPE = FORMATION
  MAXIMUM_LENGTH = 40
  DESCRIPTION = "
     The data_set_id element is a unique
     alphanumeric identifier for a data set or a data product.
     The data_set_id value for a given data set or
     product is constructed according to flight project
     naming conventions.  In most cases the data_set_id is an
     abbreviation of the data_set_name.
     Example value: MR9/VO1/VO2-M-ISS/VIS-5-CLOUD-V1.0.
     Note:  In the PDS, the values for both data_set_id and
     data_set_name are constructed according to standards
     outlined in the Standards Reference."
  STANDARD_VALUE_SET = {
     "VENUS"
     "EARTH"
  }
END_OBJECT = ELEMENT_DEFINITION
END
        </source>
                 
        <p>If the PSDD is passed in first followed by the local dictionary as follows:</p>
        <source>
... -d pdsdd.full local-dd1.full ...
        </source>
        
        <p>VTool will retain the DATA_SET_ID definition found in the local dictionary.</p>
        
        <p>If the local dictionary is passed in first followed by the PSDD as follows:</p>
        <source>
... -d local-dd1.full pdsdd.full ...
        </source>
        
        <p>VTool will retain the DATA_SET_ID definition found in the PSDD.</p>
        
        <p>The following example demonstrates the VTool behavior when passing in three dictionaries: </p>

        <p>Suppose the PSDD and the local dictionary, local-dd1.full, file have the DATA_SET_ID definition as stated above. In addition, there is another local dictionary, local-dd2.full, that will be passed into VTool also, which contains the following DATA_SET_ID definition:
        </p>
        <source>
OBJECT = ELEMENT_DEFINITION
  NAME = DATA_SET_ID
  STATUS_TYPE = APPROVED
  GENERAL_DATA_TYPE = IDENTIFIER
  UNIT_ID = NONE
  STANDARD_VALUE_TYPE = FORMATION
  MAXIMUM_LENGTH = 40
  DESCRIPTION = "
     The data_set_id element is a unique
     alphanumeric identifier for a data set or a data product.
     The data_set_id value for a given data set or
     product is constructed according to flight project
     naming conventions.  In most cases the data_set_id is an
     abbreviation of the data_set_name.
     Example value: MR9/VO1/VO2-M-ISS/VIS-5-CLOUD-V1.0.
     Note:  In the PDS, the values for both data_set_id and
     data_set_name are constructed according to standards
     outlined in the Standards Reference."
  STANDARD_VALUE_SET = {
     "MARS"
     "JUPITER"
  }
END_OBJECT = ELEMENT_DEFINITION
END
        </source>
          
        <p>If these three dictionaries get passed into VTool as follows:</p>
        <source>
... -d pdsdd.full local-dd1.full local-dd2.full ...
        </source>
          
        <p>VTool will retain the DATA_SET_ID definition found in the last dictionary specified. In this case, it is the definition found in local-dd2.full.
        </p>
        
        <p>If these dictionaries get passed into VTool in some other order like the following:</p>
        <source>
... -d local-dd2.full local-dd1.full pdsdd.full ...
        </source>
          
        <p>VTool will retain the DATA_SET_ID definition found in pdsdd.full.</p>          
      </subsection>

      <subsection name="Common Errors">
        <p>At this point in development there is a single common error that several users have encountered. The error is a follows:
        </p>

        <source>
[node:~] java gov.nasa.pds.tools.VTool ...
Exception in thread "main" java.lang.NoClassDefFoundError:
gov/nasa/pds/tools/VTool
        </source>

        <p>The actual class name may vary but the above error is the result of the <i>CLASSPATH</i> environment variable not being set correctly. Verify that the variable contains all of the specified jar files and that there are no space characters in the value. See either the <a href="#UNIX-Based Setup">UNIX-Based Setup</a> or <a href="#Windows Setup">Windows Setup</a> section for details.
        </p>
      </subsection>
    </section>
  </body>
</document>
