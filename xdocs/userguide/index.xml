<?xml version="1.0" encoding="UTF-8"?>

<!--
Copyright 2006, by the California Institute of 
Technology. ALL RIGHTS RESERVED. United States Government 
Sponsorship acknowledged. Any commercial use must be negotiated with 
the Office of Technology Transfer at the California Institute of 
Technology.

This software may be subject to U.S. export control laws. By 
accepting this software, the user agrees to comply with all 
applicable U.S. export laws and regulations. User has the 
responsibility to obtain export licenses, or other export authority 
as may be required before exporting such information to foreign 
countries or providing access to foreign persons.

$Id: index.xml 1157 2006-06-16 19:50:08Z shardman $
-->

<document>
  <properties>
    <title>User Guide</title>
    <author email="Michael.Cayanan@jpl.nasa.gov">Michael Cayanan</author>
    <author email="Sean.Hardman@jpl.nasa.gov">Sean Hardman</author>
  </properties>

  <body>
    <section name="User Guide">
      <p>This document describes how to use the Validation Tool (VTool) in order to perform automated validation of data products. The following sections can be found in this document:
      </p>

      <ul>
        <li><a href="#Overview">Overview</a></li>
        <li><a href="#Setup">Setup</a></li>
        <li><a href="#Command-Line Options">Command-Line Options</a></li>
        <li><a href="#Examples">Examples</a></li>
        <li><a href="#Using a Configuration File">Using a Configuration File</a></li>
        <li><a href="#Multiple Dictionary Support">Multiple Dictionary Support</a></li>
        <li><a href="#Common Errors">Common Errors</a></li>
      </ul>

      <p>Note: The command-line examples in this document have been broken into multiple lines for readability. The commands should be reassembled into a single line prior to execution.
      </p>

      <subsection name="Overview">
        <p>The goal of VTool is to programmatically ascertain if a given data product is PDS compliant (or "valid"). Typically, this means the data product is well formed, complete, syntactically and semantically correct, and that it conforms to all applicable PDS standards. The standards themselves are defined in the <a href="http://pds.nasa.gov/documents/sr/" target="_blank">PDS Standards Reference</a>.
        </p>


      </subsection>

      <subsection name="Setup">
        <p>Before VTool can be executed, the environment must first be configured.</p>
             
        <p>The following commands demonstrate how to set the <i>CLASSPATH</i> environment variable, which appends to its current setting. The examples contain <i>X.X.X</i>, which represents the current version of the project. Choose the appropriate command according to the platform VTool is being executed on.
        </p>

        <p><b>UNIX-Based Command</b></p>
        <source>
[node:~] setenv CLASSPATH ${CLASSPATH}:\
$HOME/product-tools-X.X.X/lib/antlr-2.7.6.jar:\
$HOME/product-tools-X.X.X/lib/commons-cli-1.0.jar:\
$HOME/product-tools-X.X.X/lib/commons-collections-3.1.jar:\
$HOME/product-tools-X.X.X/lib/commons-configuration-1.2.jar:\
$HOME/product-tools-X.X.X/lib/commons-io-1.2.jar:\
$HOME/product-tools-X.X.X/lib/commons-lang-2.1.jar:\
$HOME/product-tools-X.X.X/lib/commons-logging-1.0.3.jar:\
$HOME/product-tools-X.X.X/lib/log4j-1.2.13.jar:\
$HOME/product-tools-X.X.X/lib/product-tools-X.X.X.jar
        </source>

        <p><b>Windows Command</b></p>
        <source>
C:\&gt; set CLASSPATH=%CLASSPATH%;\
c:\product-tools-X.X.X\lib\antlr-2.7.6.jar;\
c:\product-tools-X.X.X\lib\commons-cli-1.0.jar;\
c:\product-tools-X.X.X\lib\commons-collections-3.1.jar;\
c:\product-tools-X.X.X\lib\commons-configuration-1.2.jar;\
c:\product-tools-X.X.X\lib\commons-io-1.2.jar;\
c:\product-tools-X.X.X\lib\commons-lang-2.1.jar;\
c:\product-tools-X.X.X\lib\commons-logging-1.0.3.jar;\
c:\product-tools-X.X.X\lib\log4j-1.2.13.jar;\
c:\product-tools-X.X.X\lib\product-tools-X.X.X.jar
        </source>

        <p>Please note that value for the <i>CLASSPATH</i> variable may not contain space characters. Check that the jar files found in the <i>product-tools</i> package have been correctly added to the end of the <i>CLASSPATH</i> variable. The following commands demonstrate how to verify this:
        </p>

        <p><b>UNIX-Based Command</b></p>
        <source>[node:~] echo $CLASSPATH</source>

        <p><b>Windows Command</b></p>
        <source>C:\&gt; echo %CLASSPATH%</source>
        
        <p>An alternative method to setting the <i>CLASSPATH</i> variable is to set the <i>java.ext.dirs</i> Java property on the command-line when running the tool each time. This is done by passing the property via the Java "-D" flag as demonstrated in the following example:
        </p>
        <source>
[node:~] java -Djava.ext.dirs=&lt;path to your jar files&gt;...
        </source>
        
        <p>The following commands demonstrate how to run VTool each time without having to set the <i>CLASSPATH</i> environment variable. The example shown below assumes that all the jar files found in the <i>product-tools</i> package are located in $HOME/product-tools-X.X.X/lib:
        </p>
        
        <p><b>UNIX-Based Command</b></p> 
        <source>
[node:~] java -Djava.ext.dirs=$HOME/product-tools-X.X.X/lib \
gov.nasa.pds.tools.VTool -d pdsdd.full -t TEST.LBL
        </source>
          
        <p><b>Windows Command</b></p>
        <source>
C:\&gt; java -Djava.ext.dirs=c:\product-tools-X.X.X\lib \
gov.nasa.pds.tools.VTool -d pdsdd.full -t TEST.LBL
        </source>         
      </subsection>
      
      <subsection name="Command-Line Options">
        <p>The following table contains command-line options available to VTool:</p>

        <table>
          <tr><th colspan="2">VTool Command-Line Options</th></tr>
          <tr><td nowrap="nowrap">-t,--target &lt;labels,URLs,dirs&gt;</td><td>Specify the label file(s), directories, and/or URL(s) to validate (required option)</td></tr>
          <tr><td>-d,--dict &lt;.full files&gt;</td><td>Specify the Planetary Science Data Dictionary full file name and any local dictionaries to include for validation.</td></tr>
          <tr><td>-o,--output &lt;file&gt;</td><td>Specify the file name for the report. Default is to print to the terminal.</td></tr>
<!--      <tr><td>-I, include &lt;path&gt;</td><td>Specify a starting path to search for pointer files. Default is the directory of the label being validated.</td></tr>
-->
          <tr><td>-F, --no-follow</td><td>Do not follow ^STRUCTURE pointers in a label.</td></tr>
          <tr><td>-c,--config &lt;file&gt;</td><td>Specify a configuration file to set the default values for VTool.</td></tr>
          <tr><td>-l,--local</td><td>Validate files only in the input directory rather than recursively traversing down the subdirectories.</td></tr>
          <tr><td nowrap="nowrap">-p,--pattern &lt;expressions&gt;</td><td>Specify a list of files/file patterns to include when validating an entire directory. Each pattern must be surrounded by quotes (i.e. -p "*.LBL" "*.FMT"). Pattern matching is case-insensitive in Windows, but case-sensitive for other systems.
          </td></tr>
          <tr><td nowrap="nowrap">-X,--ignore-files &lt;expressions&gt;</td><td>Specify a list of files/file patterns to ignore when validating an entire directory. Each pattern must be surrounded by quotes (i.e. -p "*.LBL" "*.FMT"). Pattern matching is case-insensitive in Windows, but case-sensitive for other systems.
          </td></tr>
          <tr><td>-h,--help</td><td>Display VTool usage</td></tr>
          <tr><td>-V,--version</td><td>Display VTool version</td></tr>
        </table>
      </subsection> 

      <subsection name="Examples">
        <p>The following command demonstrates the validation of a single data product label against the PSDD:
        </p>
        <source>
[node:~] java gov.nasa.pds.tools.VTool -d pdsdd.full \
-t TEST.LBL
        </source>

        <p>By default, the tool will write the validation report to the terminal. The following command demonstrates the same validation as above, but writing the validation report to a file:
        </p>
        <source>
[node:~] java gov.nasa.pds.tools.VTool -d pdsdd.full \
-t TEST.LBL -o report.txt
        </source>

        <p>The following command demonstrates the validation of a single data product label against the PSDD and a local dictionary:
        </p>
        <source>
[node:~] java gov.nasa.pds.tools.VTool -d pdsdd.full \
localdd.full -t TEST.LBL 
        </source>

        <p>The following command demonstrates the validation of multiple data product labels if contained in a directory:
        </p>
        <source>
[node:~] java gov.nasa.pds.tools.VTool -d pdsdd.full \
-t ./TEST_DIR
        </source>

        <p>The following command demonstrates the validation of multiple targets - a single data product label and multiple data product labels contained in another directory location:
        </p>
        <source>
[node:~] java gov.nasa.pds.tools.VTool -d pdsdd.full \
-t TEST.LBL ./TEST_DIR
        </source>

        <p>The following command demonstrates the validation of multiple data product labels contained in a directory whose extension ends in either .LBL or .FMT:
        </p>
        <source>
[node:~] java gov.nasa.pds.tools.VTool -d pdsdd.full \
-t ./TEST_DIR -p "*LBL" "*FMT"
        </source>

        <p>By default, the tool will recursively traverse the directory tree assuming there are sub-directories contained within the specified directory. The following command demonstrates the same validation as above, but without recursion:
        </p>
        <source>
[node:~] java gov.nasa.pds.tools.VTool -d pdsdd.full \ 
-t ./TEST_DIR -p "*LBL" "*FMT" -l
        </source>

        <p>The following command demonstrates the validation of multiple data product labels contained in a directory except for files ending in a .IMG or .TAB:
        </p>
        <source>
[node:~] java gov.nasa.pds.tools.VTool -d pdsdd.full \
-t ./TEST_DIR -X "*IMG" "*TAB"
        </source>
<!--          
        <p>By default, if a data product label contains a STRUCTURE pointer, it will assume it is co-located, search for, and validate the pointer file. If it is not found there, then an error message is thrown. The following command demonstrates how to specify a starting path in VTool to search for pointers when validating a data product label that contains a STRUCTURE pointer not located in the same directory as the label:
        </p>
        <source>
[node:~] java gov.nasa.pds.tools.VTool -d pdsdd.full \
-t TEST.LBL -I $HOME/starting-path
        </source>
-->          
        <p>The following command demonstrates the validation of a data product label that contains a STRUCTURE pointer, but specifying to the tool to not follow the pointer:
        </p>
        <source>
[node:~] java gov.nasa.pds.tools.VTool -d pdsdd.full \
-t TEST.LBL -F
        </source>
        
        <p>A configuration file can be passed into the command-line to change the default behaviors of the tool and to also provide users a way to perform validation with a single flag (see the section below for details on how to set the configuration file). The following command demonstrates performing validation using a configuration file:
        </p>
        <source>
[node:~] java gov.nasa.pds.tools.VTool -c config.txt
        </source>
      </subsection>

      <subsection name="Using a Configuration File">
        <p>A configuration file is used to set the default behaviors of the tool. It consists of a text file made up of keyword/value pairs. The configuration file follows the syntax of the stream parsed by the Java Properties.load(java.io.InputStream) method. </p>
        <p>Blank lines and lines which begin with the hash character "#" are ignored.</p>
        <p>Values may be separated on different lines if a backslash is placed at the end of the line that continues below.</p>
        <p>Escape sequences for special characters like a line feed, a tabulation or a unicode character, are allowed in the values and are specified in the same notation as those used in Java strings (e.g. \n, \t, \r).
        </p>
        <p><b>Since backslashes (\) have special meanings in a configuration file, keyword values that contain this character will not be interpreted properly by VTool even if it is surrounded by quotes. A common example would be a Windows path name (e.g. c:\VTT_EN_1-1\target). Use the forward slash character instead (c:/VTT_EN_1-1/target) or escape the backslash character (c:\\VTT_EN_1-1\\target).
        </b></p>
        <p><b>Any flag specified on the command-line takes precedence over any equivalent settings placed in the configuration file.</b>
        </p>
            
        <p>The following table contains valid keywords that can be specified in the configuration file:</p>

        <table>
          <tr><th>KEYWORD</th><th>ASSOCIATED FLAG</th><th>valid value(s)</th></tr>
          <tr><td>vtool.target</td><td>-t</td><td>Specify labels,directories, and/or URLs</td></tr>
          <tr><td>vtool.dict</td><td>-d</td><td>Specify dictionary files</td></tr>
          <tr><td>vtool.output</td><td>-o</td><td>Specify report file (do not specify if wanting to write the report to the terminal)</td></tr>
<!--      <tr><td>vtool.includepath</td><td>-I</td><td>Specify a starting path to search for pointer files</td></tr>
-->
          <tr><td>vtool.follow</td><td>-F</td><td>Set to 'false' to not follow ^STRUCTURE pointers in a label, set to 'true' otherwise</td></tr>
          <tr><td>vtool.recursive</td><td>-l</td><td>Set to 'false' to not perform recursion down a directory, set to 'true' otherwise</td></tr>
          <tr><td>vtool.patterns</td><td>-p</td><td>Specify patterns to search for when validating a directory.</td></tr>
          <tr><td>vtool.ignorefiles</td><td>-X</td><td>Specify patterns to ignore when validating a directory.</td></tr>
        </table>

        <p>The following example demonstrates how to set a configuration file:</p>
        <source>
# This is a VTool configuration file          

vtool.target = ./TEST_DIR
vtool.dict = pdsdd.full
vtool.output = report.txt
vtool.recursive = false
vtool.follow = false
<!--
vtool.includepath = /home/start-path
-->
vtool.patterns = "*.LBL"
        </source>

        <p>This is equivalent to running the tool with the following flags:</p>
        <source>
-t ./TEST_DIR -d pdsdd.full -o report.txt -l -p "*.LBL"  <!-- \
-I /home/start-path -F
-->
        </source>          

        <p>The following example demonstrates how to set a configuration file with multiple values for a keyword:
        </p>
        <source>
# This is a VTool configuration file with multiple values

vtool.target = TEST.LBL ./TEST_DIR
vtool.dict = pdsdd.full localdd.full
vtool.recursive = true
vtool.patterns = "*.LBL" "*.FMT"
        </source>

        <p>This is equivalent to running the tool with the following flags:</p>
        <source>
-t TEST.LBL ./TEST_DIR -d pdsdd.full localdd.full \
-p "*.LBL" "*.FMT"
        </source>

        <p>The following example demonstrates how to set a configuration file with multiple values that span across multiple lines:
        </p>
        <source>
# This is a VTool configuration file with multiple values
# that span across multiple lines

vtool.target = TEST.LBL \
               ./TEST_DIR
vtool.dict = pdsdd.full \
             localdd.full
vtool.recursive = true
vtool.patterns = "*.LBL" \
                 "*.FMT"
        </source>
        
        <p>The following example demonstrates how to override a setting in the configuration file.</p>
        
        <p>Suppose the configuration file named config.txt is defined as follows:</p>
        <source>
# This is another VTool configuration file

vtool.target = ./TEST_DIR
vtool.dict = pdsdd.full
vtool.output = report.txt
vtool.recursive = false
vtool.patterns = "*.LBL"
        </source>
          
        <p>If validating everything in TEST_DIR is desired rather than just files that end in "LBL" as is defined in the configuration file, then the following command demonstrates how to perform this behavior:
        </p>
        <source>
[node:~] java gov.nasa.pds.tools.VTool -c config.txt -p "*"
        </source>
      </subsection>
      
      <subsection name="Multiple Dictionary Support">
        <p>VTool allows multiple dictionary files to be passed in through the command-line via the "d" flag. When passing in multiple dictionaries, element and object definitions found in the dictionaries are merged together internally. In the case where definitions are found to be identical in each of the dictionary files being passed in, the definition found in the dictionary file specified LAST on the command-line will be retained.
        </p>
        
        <p>The following example demonstrates the VTool behavior when passing in two dictionary files:</p>
        
        <p>Suppose a PSDD, pdsdd.full, and a local dictionary, local-dd1.full, is being passed into VTool, where the PSDD contains the following DATA_SET_ID definition:</p>
        <source>
OBJECT = ELEMENT_DEFINITION
  NAME = DATA_SET_ID
  STATUS_TYPE = APPROVED
  GENERAL_DATA_TYPE = IDENTIFIER
  UNIT_ID = NONE
  STANDARD_VALUE_TYPE = FORMATION
  MAXIMUM_LENGTH = 40
  DESCRIPTION = "
     The data_set_id element is a unique
     alphanumeric identifier for a data set or a data product.
     The data_set_id value for a given data set or
     product is constructed according to flight project
     naming conventions.  In most cases the data_set_id is an
     abbreviation of the data_set_name.
     Example value: MR9/VO1/VO2-M-ISS/VIS-5-CLOUD-V1.0.
     Note:  In the PDS, the values for both data_set_id and
     data_set_name are constructed according to standards
     outlined in the Standards Reference."
  STANDARD_VALUE_SET = {
     "A-5-DDR-ASTERMAG-V1.0",
     "A-5-DDR-ASTEROID-SPIN-VECTORS-V3.0",
     "A-5-DDR-ASTNAMES-V1.0",
     "A-5-DDR-POLE-POSITION-REF-V1.0",
     "A-5-DDR-POLE-POSITION-V1.0",
     "A-5-DDR-TAXONOMY-V1.0",
     "ARCB-L-RTLS-3-70CM-V1.0",
     "ARCB-L-RTLS-4-70CM-V1.0",
     ....
     }
END_OBJECT = ELEMENT_DEFINITION
END
        </source>
          
        <p>and the local dictionary also contains DATA_SET_ID, but with a different set of standard values:</p>
        <source>
OBJECT = ELEMENT_DEFINITION
  NAME = DATA_SET_ID
  STATUS_TYPE = APPROVED
  GENERAL_DATA_TYPE = IDENTIFIER
  UNIT_ID = NONE
  STANDARD_VALUE_TYPE = FORMATION
  MAXIMUM_LENGTH = 40
  DESCRIPTION = "
     The data_set_id element is a unique
     alphanumeric identifier for a data set or a data product.
     The data_set_id value for a given data set or
     product is constructed according to flight project
     naming conventions.  In most cases the data_set_id is an
     abbreviation of the data_set_name.
     Example value: MR9/VO1/VO2-M-ISS/VIS-5-CLOUD-V1.0.
     Note:  In the PDS, the values for both data_set_id and
     data_set_name are constructed according to standards
     outlined in the Standards Reference."
  STANDARD_VALUE_SET = {
     "VENUS"
     "EARTH"
  }
END_OBJECT = ELEMENT_DEFINITION
END
        </source>
                 
        <p>If the PSDD is passed in first followed by the local dictionary as follows:</p>
        <source>
... -d pdsdd.full local-dd1.full ...
        </source>
        
        <p>VTool will retain the DATA_SET_ID definition found in the local dictionary.</p>
        
        <p>If the local dictionary is passed in first followed by the PSDD as follows:</p>
        <source>
... -d local-dd1.full pdsdd.full ...
        </source>
        
        <p>VTool will retain the DATA_SET_ID definition found in the PSDD.</p>
        
        <p>The following example demonstrates the VTool behavior when passing in three dictionaries: </p>

        <p>Suppose the PSDD and the local dictionary, local-dd1.full, file have the DATA_SET_ID definition as stated above. In addition, there is another local dictionary, local-dd2.full, that will be passed into VTool also, which contains the following DATA_SET_ID definition:
        </p>
        <source>
OBJECT = ELEMENT_DEFINITION
  NAME = DATA_SET_ID
  STATUS_TYPE = APPROVED
  GENERAL_DATA_TYPE = IDENTIFIER
  UNIT_ID = NONE
  STANDARD_VALUE_TYPE = FORMATION
  MAXIMUM_LENGTH = 40
  DESCRIPTION = "
     The data_set_id element is a unique
     alphanumeric identifier for a data set or a data product.
     The data_set_id value for a given data set or
     product is constructed according to flight project
     naming conventions.  In most cases the data_set_id is an
     abbreviation of the data_set_name.
     Example value: MR9/VO1/VO2-M-ISS/VIS-5-CLOUD-V1.0.
     Note:  In the PDS, the values for both data_set_id and
     data_set_name are constructed according to standards
     outlined in the Standards Reference."
  STANDARD_VALUE_SET = {
     "MARS"
     "JUPITER"
  }
END_OBJECT = ELEMENT_DEFINITION
END
        </source>
          
        <p>If these three dictionaries get passed into VTool as follows:</p>
        <source>
... -d pdsdd.full local-dd1.full local-dd2.full ...
        </source>
          
        <p>VTool will retain the DATA_SET_ID definition found in the last dictionary specified. In this case, it is the definition found in local-dd2.full.
        </p>
        
        <p>If these dictionaries get passed into VTool in some other order like the following:</p>
        <source>
... -d local-dd2.full local-dd1.full pdsdd.full ...
        </source>
          
        <p>VTool will retain the DATA_SET_ID definition found in pdsdd.full.</p>          
      </subsection>

      <subsection name="Common Errors">
        <p>At this point in development there is a single common error that several users have encountered. The error is a follows:
        </p>

        <source>
[node:~] java gov.nasa.pds.tools.VTool ...
Exception in thread "main" java.lang.NoClassDefFoundError:
gov/nasa/pds/tools/VTool
        </source>

        <p>The actual class name may vary but the above error is the result of the <i>CLASSPATH</i> environment variable not being set correctly. Verify that the variable contains all of the specified jar files and that there are no space characters in the value. See the <a href="#Setup">Setup</a> section for details.
        </p>
      </subsection>
    </section>
  </body>
</document>
